use('./use/get-2x-url.js')
use('./use/contains-url-call.js')
use('./use/convert-to-list.js')
use('./use/is-image.js')

/**
 * Frequently used list of directions.
 */
-global-directions = ('top' 'left' 'bottom' 'right')

/**
 * Frequently used list of global CSS values.
 */
-global-values = ('inherit' 'initial' 'unset')

/**
 * Returns whether there is a global CSS value in the given list.
 */
-global-value-in(list)
	return true if global in list for global in -global-values
	return false
	
/**
 * Gets the priority flag from mixin arguments.
 */
-get-priority(args)
	return last(last(args)) == !important ? !important : unquote('')
	
/**
 * Returns a Boolean, indicating whether the given value is a list of 2
 * ascending non-negative px values.
 */
-is-positive-px-range(value)
	return false unless length(value) == 2
	return false unless value[0] is a 'unit' and value[1] is a 'unit'
	return false unless unit(value[0]) == 'px' and unit(value[1]) == 'px'
	return false unless value[0] >= 0 and value[1] >= 0
	return false unless value[0] < value[1]
	return true
	
/**
 * Returns a Boolean, indicating whether the given value is a non-negative
 * unit value, or 0.
 */
-is-positive-unit(value)
	return false unless length(value) == 1
	return false unless value is a 'unit'
	return false unless unit(value) or value == 0
	return false unless value >= 0
	return true
	
/**
 * Returns a Boolean, indicating whether the given value is a non-negative,
 * unitless number.
 */
-is-positive-number(value)
	return false unless length(value) == 1
	return false unless value is a 'unit'
	return false unless unit(value) == ''
	return false unless value >= 0
	return true
	
/**
 * Returns a Boolean, indicating whether the given value is a color.
 */
-is-color(value)
	return false unless length(value) == 1
	return false unless value is a 'color'
	return true
	
/**
 * Returns a Boolean, indicating whether the given value is an image, or "none".
 */
-is-bg-image(value)
	return false unless length(value) == 1
	return false unless -is-image(value) or value == 'none'
	return true
	
/**
 * Returns a Boolean, indicating whether the given value is a valid time unit.
 */
-is-time(value)
	return false unless length(value) == 1
	return false unless value is a 'unit'
	return false unless unit(value) == 's' or unit(value) == 'ms' or value == 0
	return true
	
/**
 * Returns a Boolean, indicating whether the given value is a direction.
 */
-is-direction(value)
	return false unless length(value) == 1
	return false unless value in -global-directions
	return true
	
/**
 * Returns a Boolean, indicating whether the given value is a percentage between
 * 0% and 100%.
 */
-is-percentage(value)
	return false unless length(value) == 1
	return false unless value is a 'unit'
	return false unless unit(value) == '%'
	return false unless value >= 0% and value <= 100%
	return true
	
/**
 * Parsed a list of groups, which each contain directions folllowed by a value.
 * Returns a hash of the resulting directions and their corresponding values.
 * If there is only one group, it must be prepended by null, to create a proper
 * list with length > 1. The last group should already have potential priority
 * flags removed.
 * 
 * By default, groups without both directions and values are ignored. 
 * To accept groups without values, pass a 'default-value' option of length > 0.
 * When no value is given, this will take its place. Keep in mind that if this
 * option is not provided, and a validator function does not accept values of
 * length == 0, the validator will throw an error.
 * 
 * An option 'direction-transformer' can be passed, which is a function
 * accepting a list of the given directions, and returning a list of strings.
 * Those strings are instead used as keys in the returned hash.
 * To accept groups without directions, the 'direction-transformer' function
 * can include a case for when length(directions) == 0.
 *
 * An option 'validator' can be passed, which is a function accepting the given
 * value in a group, and returning true if it's valid, and false otherwise.
 * When false is returned, an error is thrown and stylus parsing fails.
 * 
 * Examples can be be seen in border-radius.styl, and positions.styl.
 */
-parse-groups(groups, options)
	default-value-in-options = 'default-value' in options
	default-value = options['default-value']
	
	validator-in-options = 'validator' in options
	validator = options['validator']
	
	direction-transformer-in-options = 'direction-transformer' in options
	direction-transformer = options['direction-transformer']
	
	result-directions = {}
	for group in groups
		unless group == null
			given-directions = ()
			given-value = ()
			reached-a-value = false
			for arg in group
				unless arg == null or arg == !important
					if (not reached-a-value) and arg in -global-directions
						push(given-directions, arg)
					else
						reached-a-value = true
						push(given-value, arg)
			if default-value-in-options
				given-value = default-value if length(given-value) == 0
			if validator-in-options
				error('invalid value "' + given-value + '"') unless validator(given-value)
			if direction-transformer-in-options
				given-directions = direction-transformer(given-directions)
			if length(given-value)
				given-value = clone(given-value)
				for direction in given-directions
					result-directions[direction] = given-value
	return result-directions
	
/**
 * Given a rule hash, returns a list with two elements.
 * That list's first element is the rule's first property's name (eg, font-size)
 * The list's second element is the rule's first property's value (eg, 40px)
 * Example:
 * 		rule = {selector: 'h1', properties: ()}
 * 		push(rule.properties, {margin: 40px})
 * 		push(rule.properties, {text-align: left})
 * 		push(rule.properties, {width: 100%})
 * 		-first-property(rule) => ('margin' 40px)
 */
-first-property(rule)
	properties = rule.properties
	len = length(properties)
	return null if len == 0
	return property value for property, value in properties if len == 1
	return property value for property, value in entry for entry in properties
	
/**
 * Given a list of rule hashes where each rule only contains one property,
 * returns a new list of rule hashes, which is logically equivilent, but
 * generally smaller in size.
 * Example:
 * 		rules = ()
 * 		push(rules, {selector: 'h1', properties: {font-size: 15px}})
 * 		push(rules, {selector: 'p', properties: {font-size: 15px}})
 * 		push(rules, {selector: 'h1', properties: {margin: auto}})
 * 		push(rules, {selector: 'h1', properties: {width: 100%}})
 * 		-combine-rules(rules) => (
 * 							{selector: 'h1, p', properties: {font-size: 15px}}
 * 							{selector: 'h1', properties: (
 * 								{margin: auto}
 * 								{width: 100%}
 * 							)}
 * 						)
 */
-combine-rules(rules)
	len = length(rules)
	return () unless len > 0
	
	rules = clone(rules)
	selectors = {}
	for i in (0 ... len)
		rule = rules[i]
		unless rule == null
			matched-selectors = clone(rule.selector)
			relevant-entry = -first-property(rule)
			for j in (i + 1 ... len)
				other-rule = rules[j]
				unless other-rule == null
					if -first-property(other-rule) == relevant-entry
						push(matched-selectors, other-rule.selector) unless other-rule.selector in matched-selectors
						rules[j] = null
			selector = join(', ', sort(matched-selectors))
			selectors[selector] = () unless selector in selectors
			entry = {}
			entry[relevant-entry[0]] = relevant-entry[1]
			push(selectors[selector], entry)
	results = ()
	for selector, properties in selectors
		push(results, {
			selector: selector
			properties: properties
		})
	return results
	
/**
 * Given a rule hash, print the rule in actual CSS.
 * Example:
 *  	-print-rule({selector: 'h1', properties: ({font-size: 40px} {left: 0})})
 * 	=>	h1 {
 * 			font-size: 40px;
 * 			left: 0;
 * 		}
 */
-print-rule(rule)
	selector = rule.selector
	properties = rule.properties
	{selector}
		{property} value for property, value in properties
		
