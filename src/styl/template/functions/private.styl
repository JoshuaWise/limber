/**
 * Used internally to apply "heading-" options from site-globals.
 */
-apply-heading-styles()
	properties = {
		font-family: heading-font-family
		font-size: heading-font-size
		font-weight: heading-font-weight
		font-style: heading-font-style
		line-height: heading-line-height
		margin: heading-margin
	}
	heading-names = 'h1' 'h2' 'h3' 'h4' 'h5' 'h6'
	backtrack-until-non-null = @(values, start) {
		return values[j] if values[j] != null for j in (start .. 0)
	}
	rules = ()
	for property, values in properties
		error('first value of "heading-" option cannot be null') if values[0] == null
		single-value = list-separator(values) != ','
		i = 0
		for heading-name in heading-names
			entry = {}
			entry[property] = single-value ? values : backtrack-until-non-null(values, i)
			push(rules, {
				'selector': heading-name
				'properties': entry
			})
			i = i + 1
	-print-rules(-combine-rules(rules))
	
	font-size-rules = ()
	push(font-size-rules, rule) if -first-property(rule)[0] == 'font-size' for rule in rules
	
	tablet-test = @(value) {return value != 1}
	desktop-test = @(value, i) {
		prev = backtrack-until-non-null(font-scale-heading-tablet, i)
		return value != prev
	}
	tablet-options = {query: booklet, values: font-scale-heading-tablet, test: tablet-test}
	desktop-options = {query: desktop, values: font-scale-heading-desktop, test: desktop-test}
	
	for media in (tablet-options desktop-options)
		query = media.query
		values = media.values
		test = media.test
		error('first value of "font-scale-heading-" option cannot be null') if values[0] == null
		scaled-rules = ()
		i = 0
		for rule in font-size-rules
			value = backtrack-until-non-null(values, i)
			push(scaled-rules, {
				selector: rule.selector
				properties: {font-size: rule.properties.font-size * value}
			}) if test(value, i)
			i = i + 1
		unless scaled-rules[0] == null
			@media query
				-print-rules(-combine-rules(scaled-rules))
				
-is-list-of-positive-numbers(values)
	if list-separator(values) == ','
		return false unless -is-positive-number(value) or value == null for value in values
		return false unless -is-positive-number(values[0])
		return true
	else
		return -is-positive-number(values)
		
